# import streamlit as st
# import numpy as np
# import joblib

# # Carregamento do modelo
# svc_classical = joblib.load('classical_model.pkl')

# quantum_model = joblib.load('quantum_model.pkl')

# # Configura√ß√£o da p√°gina
# st.set_page_config(page_title="Quantum Finance QVSVC", page_icon="üí∞", layout="centered")

# # Cabe√ßalho
# st.markdown("<h1 style='text-align: center; color: #4B0082;'>Quantum Finance SVM</h1>", unsafe_allow_html=True)
# st.markdown("<h4 style='text-align: center; color: #6A5ACD;'>An√°lise de Transa√ß√µes Financeiras com Machine Learning</h4>", unsafe_allow_html=True)
# st.write("---")

# # Entrada de dados
# st.subheader("Insira as caracter√≠sticas da transa√ß√£o:")
# valor_reais = st.number_input("Valor da Transa√ß√£o (em R$)", min_value=0.0, value=100.0, format="%.2f")
# tempo_horas = st.slider("Tempo da Transa√ß√£o (em horas)", min_value=0.0, max_value=24.0, value=12.0)
# fim_de_semana = st.selectbox("A transa√ß√£o ocorreu no final de semana?", options=[0, 1], format_func=lambda x: "Sim" if x else "N√£o")
# idade_cliente = st.slider("Idade do Cliente", min_value=18, max_value=100, value=30)
# latitude = st.number_input("Latitude da Localiza√ß√£o", min_value=-30.0, max_value=-15.0, value=-20.0)
# longitude = st.number_input("Longitude da Localiza√ß√£o", min_value=-60.0, max_value=-35.0, value=-47.0)

# # Normaliza√ß√µes (compat√≠veis com o modelo)
# valor_normalizado = valor_reais / 10000  # Normalizado com base no intervalo [0, 10.000]
# tempo_normalizado = tempo_horas / 24  # Normalizado para [0, 1]

# # Construir entrada para o modelo
# entrada = np.array([[valor_normalizado, tempo_normalizado, fim_de_semana, idade_cliente, latitude, longitude]])

# # Previs√£o com SVM Cl√°ssico
# if st.button("Classificar"):
#     pred_classico = svc_classical.predict(entrada)
#     resultado_classico = "Fraudulenta" if pred_classico[0] == 1 else "N√£o Fraudulenta"
#     st.success(f"Resultado da Classifica√ß√£o: **{resultado_classico}**")

# if st.button("Classificar - QSVC"):
#     pred_quantum = quantum_model.predict(entrada)
#     resultado_classico = "Fraudulenta" if pred_quantum[0] == 1 else "N√£o Fraudulenta"
#     st.success(f"Resultado da Classifica√ß√£o: **{resultado_classico}**")

# # Explica√ß√£o e rodap√©
# st.write("---")
# st.write("""
# ### Informa√ß√µes:
# - **Valor da Transa√ß√£o**: Representa o valor da transa√ß√£o em reais (ex.: R$10.000).
# - **Tempo da Transa√ß√£o**: Representa a hora do dia em que a transa√ß√£o ocorreu (0-24h).
# - **Fim de Semana**: Indica se a transa√ß√£o ocorreu em um s√°bado ou domingo.
# - **Idade do Cliente**: Faixa et√°ria do cliente.
# - **Latitude e Longitude**: Coordenadas da localiza√ß√£o onde a transa√ß√£o ocorreu.

# As entradas s√£o normalizadas internamente para compatibilidade com os modelos treinados.
# """)

# st.markdown(
#     """
#     <div style='text-align: center; color: gray;'>
#         Desenvolvido por Weslley Rosa Prado<br>
#         Orientador: Professor Doutor Jos√© Alexandre Nogueira<br>
#         Projeto Pr√°tico Baseado no Trabalho de Conclus√£o de Curso de F√≠sica<br>
#         Universidade Federal do Esp√≠rito Santo - UFES
#     </div>
#     """,
#     unsafe_allow_html=True
# )

# import streamlit as st
# import numpy as np
# import joblib
# import pandas as pd

# # Carregar o modelo
# svc_classical = joblib.load('classical_model_com_perfis.pkl')

# # Configura√ß√£o da p√°gina
# st.set_page_config(page_title="Quantum Finance QVSVC", page_icon="üí∞", layout="centered")

# # Cabe√ßalho
# st.markdown("<h1 style='text-align: center; color: #4B0082;'>Quantum Finance SVM</h1>", unsafe_allow_html=True)
# st.markdown("<h4 style='text-align: center; color: #6A5ACD;'>An√°lise de Transa√ß√µes Financeiras com Machine Learning</h4>", unsafe_allow_html=True)
# st.write("---")

# # Mapeamento de capitais para suas coordenadas
# capitais = {
#     "Rio Branco": (-9.0, -67.8),
#     "Macei√≥": (-9.6, -35.7),
#     "Macap√°": (0.0, -51.0),
#     "Manaus": (-3.1, -60.0),
#     "Salvador": (-12.97, -38.51),
#     "Fortaleza": (-3.7, -38.5),
#     "Bras√≠lia": (-15.78, -47.93),
#     "Vit√≥ria": (-20.32, -40.3),
#     "Goi√¢nia": (-16.68, -49.3),
#     "S√£o Lu√≠s": (-2.55, -44.3),
#     "Cuiab√°": (-15.6, -56.1),
#     "Campo Grande": (-20.5, -54.6),
#     "Belo Horizonte": (-19.92, -43.94),
#     "Bel√©m": (-1.46, -48.49),
#     "Jo√£o Pessoa": (-7.12, -34.88),
#     "Curitiba": (-25.43, -49.27),
#     "Recife": (-8.05, -34.9),
#     "Teresina": (-5.09, -42.81),
#     "Rio de Janeiro": (-22.91, -43.17),
#     "Natal": (-5.79, -35.2),
#     "Porto Alegre": (-30.03, -51.22),
#     "Aracaju": (-10.95, -37.07),
#     "Palmas": (-10.2, -48.3),
#     "S√£o Paulo": (-23.55, -46.63),
#     "Porto Velho": (-8.76, -63.9),
#     "Boa Vista": (2.82, -60.7),
#     "Florian√≥polis": (-27.59, -48.55)
# }

# # Entrada de dados
# st.subheader("Insira as caracter√≠sticas da transa√ß√£o:")
# valor_reais = st.number_input("Valor da Transa√ß√£o (em R$)", min_value=0.0, value=100.0, format="%.2f")
# tempo_horas = st.slider("Tempo da Transa√ß√£o (em horas)", min_value=0.0, max_value=24.0, value=12.0)
# fim_de_semana = st.selectbox("A transa√ß√£o ocorreu no final de semana?", options=[0, 1], format_func=lambda x: "Sim" if x else "N√£o")
# idade_cliente = st.slider("Idade do Cliente", min_value=18, max_value=100, value=30)

# # Sele√ß√£o da cidade (capital brasileira)
# cidade = st.selectbox("Selecione a Capital", options=list(capitais.keys()))

# # Obter a latitude e longitude da cidade selecionada
# latitude, longitude = capitais[cidade]

# # Normaliza√ß√µes (compat√≠veis com o modelo)
# valor_normalizado = valor_reais / 10000  # Normalizado com base no intervalo [0, 10.000]
# tempo_normalizado = tempo_horas / 24  # Normalizado para [0, 1]

# # Perfil do cliente (apenas exemplo, adicionar conforme necess√°rio)
# perfil = st.selectbox("Selecione o Perfil do Cliente", options=['Aposentado', 'Estudante', 'Engenheiro'])

# # Codifica√ß√£o One-Hot para perfil
# perfils_possiveis = ['Aposentado', 'Estudante', 'Engenheiro']  # Exemplo de perfis
# perfil_encoded = [1 if perfil == p else 0 for p in perfils_possiveis]

# # Codifica√ß√£o One-Hot para cidade
# cidades_possiveis = list(capitais.keys())  # Exemplo de cidades
# cidade_encoded = [1 if cidade == c else 0 for c in cidades_possiveis]

# # Criar dataframe para verificar as colunas One-Hot (para garantir que as colunas estejam no formato correto)
# input_df = pd.DataFrame([perfil_encoded + cidade_encoded], columns=perfils_possiveis + cidades_possiveis)

# # Verificar a correspond√™ncia com o n√∫mero de caracter√≠sticas do modelo
# expected_features = len(input_df.columns) + 6  # 6 outras vari√°veis al√©m das One-Hot
# entrada = np.array([[valor_normalizado, tempo_normalizado, fim_de_semana, idade_cliente, latitude, longitude] + input_df.values.flatten().tolist()])

# # Previs√£o com SVM Cl√°ssico
# if st.button("Classificar"):
#     if entrada.shape[1] == expected_features:
#         pred_classico = svc_classical.predict(entrada)
#         resultado_classico = "Fraudulenta" if pred_classico[0] == 1 else "N√£o Fraudulenta"
#         st.success(f"Resultado da Classifica√ß√£o: **{resultado_classico}**")
#     else:
#         st.error("Erro: O n√∫mero de caracter√≠sticas fornecidas n√£o corresponde ao n√∫mero esperado pelo modelo.")

# # Explica√ß√£o e rodap√©
# st.write("---")
# st.write("""
# ### Informa√ß√µes:
# - **Valor da Transa√ß√£o**: Representa o valor da transa√ß√£o em reais (ex.: R$10.000).
# - **Tempo da Transa√ß√£o**: Representa a hora do dia em que a transa√ß√£o ocorreu (0-24h).
# - **Fim de Semana**: Indica se a transa√ß√£o ocorreu em um s√°bado ou domingo.
# - **Idade do Cliente**: Faixa et√°ria do cliente.
# - **Cidade**: Selecione a cidade da transa√ß√£o para obter as coordenadas de latitude e longitude.

# As entradas s√£o normalizadas internamente para compatibilidade com os modelos treinados.
# """)

# st.markdown(
#     """
#     <div style='text-align: center; color: gray;'>
#         Desenvolvido por Weslley Rosa Prado<br>
#         Orientador: Professor Doutor Jos√© Alexandre Nogueira<br>
#         Projeto Pr√°tico Baseado no Trabalho de Conclus√£o de Curso de F√≠sica<br>
#         Universidade Federal do Esp√≠rito Santo - UFES
#     </div>
#     """,
#     unsafe_allow_html=True
# )

# import streamlit as st
# import joblib
# import pandas as pd
# import numpy as np

# # Carregar os modelos, scaler e colunas de treinamento
# svc_classical = joblib.load('classical_model_com_perfis.pkl')
# scaler = joblib.load('scaler.pkl')
# expected_columns = joblib.load('training_columns.pkl')

# # Dados auxiliares
# capitais = {
#     "S√£o Paulo": (-23.55, -46.63), "Rio de Janeiro": (-22.91, -43.17), "Belo Horizonte": (-19.92, -43.94),
#     "Bras√≠lia": (-15.78, -47.93), "Salvador": (-12.97, -38.51), "Fortaleza": (-3.7, -38.5),
#     "Curitiba": (-25.43, -49.27), "Manaus": (-3.1, -60.0), "Recife": (-8.05, -34.9),
#     "Porto Alegre": (-30.03, -51.22), "Vit√≥ria": (-20.32, -40.3), "Goi√¢nia": (-16.68, -49.3),
#     "Bel√©m": (-1.46, -48.49), "S√£o Lu√≠s": (-2.55, -44.3), "Macei√≥": (-9.6, -35.7),
#     "Natal": (-5.79, -35.2), "Campo Grande": (-20.5, -54.6), "Jo√£o Pessoa": (-7.12, -34.88),
#     "Aracaju": (-10.95, -37.07), "Teresina": (-5.09, -42.81), "Cuiab√°": (-15.6, -56.1),
#     "Macap√°": (0.0, -51.0), "Rio Branco": (-9.0, -67.8), "Boa Vista": (2.82, -60.7),
#     "Palmas": (-10.2, -48.3), "Florian√≥polis": (-27.59, -48.55), "Porto Velho": (-8.76, -63.9)
# }
# perfis = ["Aposentado", "Estudante", "Engenheiro", "Banc√°rio", "Investidor", "Comerciante"]

# # Configura√ß√£o do Streamlit
# st.set_page_config(page_title="Classificador de Transa√ß√µes", page_icon="üí≥", layout="centered")

# st.title("Classificador de Transa√ß√µes Financeiras")
# st.write("Insira os dados da transa√ß√£o para classifica√ß√£o.")

# # Entradas do usu√°rio
# valor = st.number_input("Valor da transa√ß√£o (em R$):", min_value=0.0, value=100.0, format="%.2f")
# tempo = st.slider("Hora da transa√ß√£o (0-24h):", min_value=0.0, max_value=24.0, value=12.0)
# fim_de_semana = st.selectbox("A transa√ß√£o ocorreu no final de semana?", options=[0, 1], format_func=lambda x: "Sim" if x == 1 else "N√£o")
# idade = st.slider("Idade do cliente:", min_value=18, max_value=80, value=30)
# perfil = st.selectbox("Perfil do cliente:", options=perfis)
# cidade = st.selectbox("Cidade da transa√ß√£o:", options=list(capitais.keys()))

# # Obter latitude e longitude
# latitude, longitude = capitais[cidade]

# # Normalizar os dados cont√≠nuos
# dados_norm = scaler.transform([[valor, tempo, latitude, longitude]])
# valor_norm, tempo_norm, lat_norm, long_norm = dados_norm[0]

# # Codifica√ß√£o one-hot de vari√°veis categ√≥ricas
# perfil_encoded = [1 if p == perfil else 0 for p in perfis]
# cidade_encoded = [1 if c == cidade else 0 for c in capitais.keys()]

# # Criar DataFrame de entrada
# entrada = pd.DataFrame(
#     [[valor_norm, tempo_norm, fim_de_semana, idade, lat_norm, long_norm] + perfil_encoded + cidade_encoded],
#     columns=expected_columns
# )

# # Verifique as colunas do DataFrame 'entrada' e 'expected_columns'
# print("Colunas no DataFrame de entrada:", entrada.columns)
# print("Colunas esperadas pelo modelo:", expected_columns)

# # Alinhar as colunas de 'entrada' com 'expected_columns'
# entrada = entrada.reindex(columns=expected_columns, fill_value=0)

# # Verifique novamente
# print("Colunas ap√≥s reindexa√ß√£o:", entrada.columns)

# # Classifica√ß√£o
# if st.button("Classificar"):
#     try:
#         predicao = svc_classical.predict(entrada)
#         resultado = "Fraudulenta" if predicao[0] == 1 else "N√£o Fraudulenta"
#         st.success(f"A transa√ß√£o foi classificada como **{resultado}**.")
#     except Exception as e:
#         st.error(f"Erro na classifica√ß√£o: {e}")

# # Informa√ß√µes adicionais
# st.write("---")
# st.markdown("""
# #### Sobre:
# - Este classificador usa um modelo SVM treinado com dados simulados.
# - As vari√°veis categ√≥ricas como perfil e cidade foram codificadas com One-Hot Encoding.
# - As vari√°veis cont√≠nuas foram normalizadas para compatibilidade com o modelo.
# """)


# import streamlit as st
# import joblib
# import pandas as pd
# from sklearn.preprocessing import OneHotEncoder

# Carregar o modelo salvo
# modelo_carregado = joblib.load('./create_models/modelo_anti_fraude.pkl')

# # Dados auxiliares para a interface
# capitais = {
#     "S√£o Paulo": (-23.55, -46.63), "Rio de Janeiro": (-22.91, -43.17), "Belo Horizonte": (-19.92, -43.94),
#     "Bras√≠lia": (-15.78, -47.93), "Salvador": (-12.97, -38.51), "Fortaleza": (-3.7, -38.5),
#     "Curitiba": (-25.43, -49.27), "Manaus": (-3.1, -60.0), "Recife": (-8.05, -34.9),
#     "Porto Alegre": (-30.03, -51.22), "Vit√≥ria": (-20.32, -40.3), "Goi√¢nia": (-16.68, -49.3),
#     "Bel√©m": (-1.46, -48.49), "S√£o Lu√≠s": (-2.55, -44.3), "Macei√≥": (-9.6, -35.7),
#     "Natal": (-5.79, -35.2), "Campo Grande": (-20.5, -54.6), "Jo√£o Pessoa": (-7.12, -34.88),
#     "Aracaju": (-10.95, -37.07), "Teresina": (-5.09, -42.81), "Cuiab√°": (-15.6, -56.1),
#     "Macap√°": (0.0, -51.0), "Rio Branco": (-9.0, -67.8), "Boa Vista": (2.82, -60.7),
#     "Palmas": (-10.2, -48.3), "Florian√≥polis": (-27.59, -48.55), "Porto Velho": (-8.76, -63.9)
# }
# perfis = ["Aposentado", "Estudante", "Engenheiro", "Banc√°rio", "Investidor", "Comerciante"]

# # Configura√ß√£o do Streamlit
# st.set_page_config(page_title="Classificador de Transa√ß√µes", page_icon="üí≥", layout="centered")

# st.title("Classificador de Transa√ß√µes Financeiras")
# st.write("Insira os dados da transa√ß√£o para classifica√ß√£o.")

# # Entradas do usu√°rio
# valor = st.number_input("Valor da transa√ß√£o (em R$):", min_value=0.0, value=100.0, format="%.2f")
# tempo = st.slider("Hora da transa√ß√£o (0-24h):", min_value=0.0, max_value=24.0, value=12.0)
# fim_de_semana = st.selectbox("A transa√ß√£o ocorreu no final de semana?", options=[0, 1], format_func=lambda x: "Sim" if x == 1 else "N√£o")
# idade = st.slider("Idade do cliente:", min_value=18, max_value=80, value=30)
# perfil = st.selectbox("Perfil do cliente:", options=perfis)
# cidade = st.selectbox("Cidade da transa√ß√£o:", options=list(capitais.keys()))
# tipo_transacao = st.selectbox("Tipo de transa√ß√£o:", options=["compra", "saque", "transfer√™ncia"])  # Exemplo de transa√ß√µes
# numero_transacoes = st.slider("N√∫mero de transa√ß√µes do cliente:", min_value=1, max_value=20, value=5)

# # Obter latitude e longitude
# latitude, longitude = capitais[cidade]

# # Criar lista com as entradas
# novos_dados = [[valor, tempo, idade, latitude, longitude, numero_transacoes, tipo_transacao, fim_de_semana ]]

# # Aplicar One-Hot Encoding para 'perfil' e 'cidade'
# encoder_perfil = OneHotEncoder(sparse_output=False)  # Corre√ß√£o: sparse_output=False
# encoder_cidade = OneHotEncoder(sparse_output=False)  # Corre√ß√£o: sparse_output=False

# # Transformar as vari√°veis categ√≥ricas 'perfil' e 'cidade'
# perfil_encoded = encoder_perfil.fit_transform([[perfil]])
# cidade_encoded = encoder_cidade.fit_transform([[cidade]])

# # Combinar todas as entradas
# entrada_completa = novos_dados[0][:6] + perfil_encoded[0].tolist() + cidade_encoded[0].tolist() + novos_dados[0][6:]

# # Exibir a entrada completa para confer√™ncia
# st.write(f"Entrada para o modelo: {entrada_completa}")

# # Realizar a previs√£o
# if st.button("Classificar Transa√ß√£o"):
#     try:
#         print(entrada_completa)
#         # Fazer a previs√£o
#         previsao = modelo_carregado.predict([entrada_completa])
#         resultado = "Fraudulenta" if previsao[0] == 1 else "N√£o Fraudulenta"
#         st.success(f"A transa√ß√£o foi classificada como **{resultado}**.")
#     except Exception as e:
#         st.error(f"Erro na classifica√ß√£o: {e}")

# # Informa√ß√µes adicionais sobre o modelo
# st.write("---")
# st.markdown("""
# #### Sobre:
# - Este classificador usa um modelo SVM treinado com dados simulados para detectar transa√ß√µes fraudulentas.
# - As vari√°veis categ√≥ricas como perfil e cidade s√£o processadas diretamente no modelo.
# - Para melhorar a precis√£o, as vari√°veis cont√≠nuas, como valor e hora da transa√ß√£o, foram consideradas no treinamento do modelo.
# """)


import pandas as pd
import joblib
import streamlit as st

# Carregar o modelo salvo

# Carregar o modelo salvo
modelo_carregado = joblib.load('./create_models/modelo_anti_fraude.pkl')
# Configurar as entradas do usu√°rio no Streamlit
st.title("Classificador de Transa√ß√µes Financeiras")
st.write("Insira os dados da transa√ß√£o para classifica√ß√£o.")

# Entradas do usu√°rio
valor = st.number_input("Valor da transa√ß√£o (em R$):", min_value=0.0, value=100.0, format="%.2f")
# tempo = st.slider("Hora da transa√ß√£o (0-24h):", min_value=0.0, max_value=24.0, value=12.0)
# Slider de tempo em intervalos de 30 minutos
tempo = st.slider(
    "Hora da transa√ß√£o (0-24h):",
    min_value=0.0,  # In√≠cio do intervalo
    max_value=24.0, # Fim do intervalo
    value=12.0,     # Valor inicial
    step=0.5        # Incremento de 30 minutos
)
fim_de_semana = st.selectbox("A transa√ß√£o ocorreu no final de semana?", options=[0, 1], format_func=lambda x: "Sim" if x == 1 else "N√£o")
idade_cliente = st.slider("Idade do cliente:", min_value=18, max_value=80, value=30)
numero_transacoes = st.number_input("N√∫mero de transa√ß√µes no dia:", min_value=1, value=5)
tipo_transacao = st.selectbox("Tipo de transa√ß√£o:", options=["Compra", "Saque", "Transfer√™ncia"])
cidade = st.selectbox("Cidade da transa√ß√£o:", options=[
    "S√£o Paulo", "Rio de Janeiro", "Belo Horizonte", "Bras√≠lia", "Salvador", 
    "Fortaleza", "Curitiba", "Manaus", "Recife", "Porto Alegre", 
    "Vit√≥ria", "Goi√¢nia", "Bel√©m", "S√£o Lu√≠s", "Macei√≥", 
    "Natal", "Campo Grande", "Jo√£o Pessoa", "Aracaju", "Teresina", 
    "Cuiab√°", "Macap√°", "Rio Branco", "Boa Vista", "Palmas", 
    "Florian√≥polis", "Porto Velho"
])
perfil = st.selectbox("Perfil do cliente:", options=["Aposentado", "Estudante", "N√£o Aposentado"])

# Criar DataFrame com as entradas
novos_dados = pd.DataFrame([{
    "valor": valor,
    "tempo": tempo,
    "fim_de_semana": fim_de_semana,
    "idade_cliente": idade_cliente,
    "numero_transacoes": numero_transacoes,
    "tipo_transacao": tipo_transacao,
    "cidade": cidade,
    "perfil": perfil
}])

# Realizar a classifica√ß√£o
if st.button("Classificar Transa√ß√£o"):
    try:
        previsao = modelo_carregado.predict(novos_dados)
        resultado = "Fraudulenta" if previsao[0] == 1 else "N√£o Fraudulenta"
        st.success(f"A transa√ß√£o foi classificada como **{resultado}**.")
    except Exception as e:
        st.error(f"Erro na classifica√ß√£o: {e}")


print(valor*numero_transacoes)